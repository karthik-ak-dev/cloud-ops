name: Update and Deploy Service

# =====================================================================
# REQUIRED SECRETS:
# =====================================================================
# AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
# These credentials must belong to an IAM user that:
# 1. Has permissions for EKS operations
# 2. Is mapped in the EKS cluster's aws-auth ConfigMap to a Kubernetes RBAC role
#
# To add your CI/CD IAM user to EKS:
# 1. Get your IAM user ARN:
#    aws sts get-caller-identity --query Arn --output text
#
# 2. Edit the aws-auth ConfigMap in your EKS cluster:
#    kubectl edit configmap aws-auth -n kube-system
#
# 3. Add your user mapping:
#    mapUsers:
#    - userarn: arn:aws:iam::123456789012:user/ci-cd-user
#      username: ci-cd-user
#      groups:
#      - system:masters
# =====================================================================

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service name to update and deploy'
        required: true
        type: string
      environment:
        description: 'Environment (dev, prod)'
        required: true
        type: choice
        options:
          - dev
          - prod
        default: 'dev'
      image_tag:
        description: 'New Docker image tag'
        required: true
        type: string
      region:
        description: 'AWS region'
        required: true
        type: string
        default: 'us-east-1'
      project_name:
        description: 'Project name (used for cluster name)'
        required: true
        type: string
        default: 'client-name'

# Add permissions for the GITHUB_TOKEN
permissions:
  contents: write

# Define common environment variables at the job level
env:
  SERVICE: ${{ github.event.inputs.service }}
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  REGION: ${{ github.event.inputs.region }}
  PROJECT_NAME: ${{ github.event.inputs.project_name }}
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}

jobs:
  update-and-deploy:
    name: Update Helm Values and Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          token: ${{ github.token }}
      
      # Set additional environment variables
      - name: Set up environment variables
        run: |
          # Set namespace to be used by all steps
          NAMESPACE="${{ env.SERVICE }}-${{ env.ENVIRONMENT }}"
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
          
          # EKS cluster name
          CLUSTER_NAME="${{ env.PROJECT_NAME }}-eks-cluster"
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          
          # Release name for Helm
          RELEASE_NAME="${{ env.SERVICE }}-${{ env.ENVIRONMENT }}"
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
      
      # Install yq for YAML processing
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.30.8/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
      
      # Update Helm values file with new image tag
      - name: Update Helm values
        run: |
          # Update the image tag in the values file
          cd helm/values/${{ env.ENVIRONMENT }}
          
          # Ensure file exists
          if [ ! -f "${{ env.SERVICE }}.yaml" ]; then
            echo "Error: Values file for service ${{ env.SERVICE }} does not exist."
            exit 1
          fi
          
          # Update the image.tag field while preserving the file format
          yq e ".image.tag = \"${{ env.IMAGE_TAG }}\"" -i ${{ env.SERVICE }}.yaml
          
          # Commit and push the updated values file
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add ${{ env.SERVICE }}.yaml
          git commit -m "ci: update ${{ env.SERVICE }} image to ${{ env.IMAGE_TAG }}" || echo "No changes to commit"
          git push
      
      # Install Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
      
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
      
      # Verify AWS authentication
      - name: Verify AWS auth
        run: |
          aws sts get-caller-identity
          aws eks list-clusters
      
      # Configure kubectl
      - name: Configure kubectl
        run: |
          echo "Configuring kubectl for cluster ${{ env.CLUSTER_NAME }} in region ${{ env.REGION }}"
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.CLUSTER_NAME }} --verbose
          
          # Verify kubectl configuration
          kubectl config view
          kubectl cluster-info
          
      # Create or ensure namespace exists
      - name: Create namespace
        run: |
          echo "Creating or ensuring namespace ${{ env.NAMESPACE }} exists"
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      
      # Deploy service with Helm
      - name: Deploy with Helm
        run: |
          echo "Deploying ${{ env.SERVICE }} to ${{ env.ENVIRONMENT }} environment in namespace ${{ env.NAMESPACE }}"
          
          # Check if this is an update or initial deployment
          if helm status ${{ env.RELEASE_NAME }} -n ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            # Update existing deployment
            helm upgrade ${{ env.RELEASE_NAME }} ./helm/charts/microservice -f ./helm/values/${{ env.ENVIRONMENT }}/${{ env.SERVICE }}.yaml -n ${{ env.NAMESPACE }}
          else
            # Initial deployment
            helm install ${{ env.RELEASE_NAME }} ./helm/charts/microservice -f ./helm/values/${{ env.ENVIRONMENT }}/${{ env.SERVICE }}.yaml -n ${{ env.NAMESPACE }}
          fi
      
      # Verify deployment
      - name: Verify deployment
        run: |
          # Wait for deployment to stabilize
          kubectl rollout status deployment/${{ env.RELEASE_NAME }} -n ${{ env.NAMESPACE }} --timeout=180s || true
          
          # Get pod status
          kubectl get pods -l app.kubernetes.io/name=${{ env.SERVICE }} -n ${{ env.NAMESPACE }}
          
          # Get service status
          kubectl get svc -l app.kubernetes.io/name=${{ env.SERVICE }} -n ${{ env.NAMESPACE }}
          
          # Get ingress status if enabled
          kubectl get ingress -l app.kubernetes.io/name=${{ env.SERVICE }} -n ${{ env.NAMESPACE }} || true 